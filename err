In file included from src/SymbolTable.cpp:3:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
src/SymbolTable.cpp:77:34: warning: '&&' within '||' [-Wlogical-op-parentheses]
    if (this->getType()->isInt() && ((IntType *)this->getType())->isConst() ||
        ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~
src/SymbolTable.cpp:77:34: note: place parentheses around the '&&' expression to silence this warning
    if (this->getType()->isInt() && ((IntType *)this->getType())->isConst() ||
                                 ^
        (                                                                  )
src/SymbolTable.cpp:78:36: warning: '&&' within '||' [-Wlogical-op-parentheses]
        this->getType()->isFloat() && ((FloatType *)this->getType())->isConst())
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/SymbolTable.cpp:78:36: note: place parentheses around the '&&' expression to silence this warning
        this->getType()->isFloat() && ((FloatType *)this->getType())->isConst())
                                   ^
        (                                                                      )
3 warnings generated.
In file included from src/Instruction.cpp:8:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
1 warning generated.
In file included from src/main.cpp:4:
In file included from include/Ast.h:8:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
In file included from src/main.cpp:4:
include/Ast.h:53:42: warning: field 'symbolEntry' will be initialized after field 'isCond' [-Wreorder]
    ExprNode(SymbolEntry *symbolEntry) : symbolEntry(symbolEntry), isCond(false){};
                                         ^
include/Ast.h:202:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (arrType->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:208:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:202:22: note: remove the 'if' if its condition is always true
                else if (arrType->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:189:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
include/Ast.h:168:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:184:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:168:22: note: remove the 'if' if its condition is always true
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:154:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
4 warnings generated.
In file included from src/Ast.cpp:1:
In file included from include/Ast.h:8:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
In file included from src/Ast.cpp:1:
include/Ast.h:53:42: warning: field 'symbolEntry' will be initialized after field 'isCond' [-Wreorder]
    ExprNode(SymbolEntry *symbolEntry) : symbolEntry(symbolEntry), isCond(false){};
                                         ^
include/Ast.h:202:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (arrType->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:208:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:202:22: note: remove the 'if' if its condition is always true
                else if (arrType->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:189:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
include/Ast.h:168:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:184:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:168:22: note: remove the 'if' if its condition is always true
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:154:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
src/Ast.cpp:331:19: warning: unused variable 'temp' [-Wunused-variable]
        ExprNode *temp = param;
                  ^
In file included from src/Ast.cpp:1:
include/Ast.h:118:15: warning: private field 'param' is not used [-Wunused-private-field]
    ExprNode *param;
              ^
6 warnings generated.
In file included from src/Type.cpp:1:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
1 warning generated.
In file included from src/MachineCode.cpp:3:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
src/MachineCode.cpp:652:10: warning: unused variable 'lr' [-Wunused-variable]
    auto lr = new MachineOperand(MachineOperand::REG, 14);
         ^
src/MachineCode.cpp:698:36: warning: '&&' within '||' [-Wlogical-op-parentheses]
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
            ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~
src/MachineCode.cpp:698:36: note: place parentheses around the '&&' expression to silence this warning
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
                                   ^
            (                                                              )
src/MachineCode.cpp:698:105: warning: '&&' within '||' [-Wlogical-op-parentheses]
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
                                                                            ~~ ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/MachineCode.cpp:698:105: note: place parentheses around the '&&' expression to silence this warning
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
                                                                                                        ^
                                                                               (                                                                  )
src/MachineCode.cpp:698:176: warning: '&&' within '||' [-Wlogical-op-parentheses]
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
                                                                                                                                                   ~~ ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/MachineCode.cpp:698:176: note: place parentheses around the '&&' expression to silence this warning
        if (se->getType()->isInt() && ((IntType *)se->getType())->isConst() || se->getType()->isFloat() && ((FloatType *)se->getType())->isConst() || se->getType()->isArray() && ((ArrayType *)se->getType())->isConst())
                                                                                                                                                                               ^
                                                                                                                                                      (                                                                  )
5 warnings generated.
In file included from src/Unit.cpp:2:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
1 warning generated.
In file included from src/Function.cpp:3:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
1 warning generated.
In file included from src/parser.y:24,
                 from src/lexer.l:5:
include/Ast.h: In constructor ‘ExprNode::ExprNode(SymbolEntry*)’:
include/Ast.h:48:18: warning: ‘ExprNode::symbolEntry’ will be initialized after [-Wreorder]
     SymbolEntry *symbolEntry;
                  ^~~~~~~~~~~
include/Ast.h:47:10: warning:   ‘bool ExprNode::isCond’ [-Wreorder]
     bool isCond;
          ^~~~~~
include/Ast.h:53:5: warning:   when initialized here [-Wreorder]
     ExprNode(SymbolEntry *symbolEntry) : symbolEntry(symbolEntry), isCond(false){};
     ^~~~~~~~
In file included from src/parser.y:2:
In file included from src/parser.y:24:
In file included from include/Ast.h:8:
include/Type.h:145:5: warning: control may reach end of non-void function [-Wreturn-type]
    };
    ^
In file included from src/parser.y:2:
In file included from src/parser.y:24:
include/Ast.h:53:42: warning: field 'symbolEntry' will be initialized after field 'isCond' [-Wreorder]
    ExprNode(SymbolEntry *symbolEntry) : symbolEntry(symbolEntry), isCond(false){};
                                         ^
include/Ast.h:202:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (arrType->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:208:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:202:22: note: remove the 'if' if its condition is always true
                else if (arrType->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:189:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
include/Ast.h:168:26: warning: variable 'temp' is used uninitialized whenever 'if' condition is false [-Wsometimes-uninitialized]
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:184:31: note: uninitialized use occurs here
            dst = new Operand(temp);
                              ^~~~
include/Ast.h:168:22: note: remove the 'if' if its condition is always true
                else if (((ArrayType *)se->getType())->getBaseType()->isFloat())
                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
include/Ast.h:154:30: note: initialize the variable 'temp' to silence this warning
            SymbolEntry *temp;
                             ^
                              = nullptr
4 warnings generated.
